plugins {
    id 'java'
}

version '1.0.0'

sourceCompatibility = 1.8

// Dependency versions
// ---------------------------------------

def leveldbVersion = "1.8"
// --------------------------------------

static def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

if (isWindows()) {
    ext {
        leveldbGroup = "org.ethereum"
        leveldbName = "leveldbjni-all"
        leveldbVersion = "1.18.3"
    }
} else {
    ext {
        leveldbGroup = "org.fusesource.leveldbjni"
        leveldbName = "leveldbjni-all"
        leveldbVersion = "1.8"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.auto.value:auto-value-annotations:1.10'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.apache.tuweni:tuweni-bytes:0.10.0'
    implementation 'org.apache.tuweni:tuweni-units:0.10.0'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
//    implementation 'org.hyperledger.besu:blake2bf:0.6.1'


    implementation "org.immutables:value:2.9.2"

    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.apache.tuweni:tuweni-units:0.10.0'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'org.mockito:mockito-core:4.8.0'

    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.9.1'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    executionData.from = '../framework/build/jacoco/jacocoTest.exec'
    afterEvaluate {
        classDirectories.from = classDirectories.files.collect {
            fileTree(dir: it,)
        }
    }
}
